/**
  * Copyright (c) 2020-2030 宁波哥爱帮科技有限公司
  */
package $!{package.Controller};

import com.fontana.base.annotation.MyRequestBody;
import com.fontana.base.result.Pagination;
import com.fontana.base.result.Result;
import com.fontana.base.result.ResultCode;
import com.fontana.db.object.MyOrderParam;
import com.fontana.db.object.MyPageParam;
import com.fontana.db.util.MyModelUtil;
import com.fontana.db.util.MyPageUtil;
import com.fontana.util.lang.ObjectUtil;
import com.fontana.util.validate.ValidateUtil;
import com.github.pagehelper.page.PageMethod;
import io.swagger.annotations.Api;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestParam;
import $!{package.Entity}.$!{entity};
#set($dtoPackage=$package.Entity.replace("service","api").replace("model","dto"))
import $!{dtoPackage}.$!{entity}DTO;
#set($voPackage=$package.Entity.replace("service","api").replace("model","vo"))
import $!{voPackage}.$!{entity}VO;
import $!{package.Service}.$!{table.serviceName};
import $!{superServiceClassPackage};
#if($!{superControllerClassPackage})
import $!{superControllerClassPackage};
#end

import java.util.List;


/**
 * $!{table.comment} 控制器
 *
 * @author $!{author}
 * @since $!{date}
 */
@Api(tags = "$!{table.comment}接口")
@RestController
@RequestMapping("$!{table.entityPath}")
#if($!{superControllerClass})
#foreach($field in $!{table.fields})
#if($!{field.keyFlag})##主键
public class $!{table.controllerName} extends $!{superControllerClass}<$!{entity}DTO, $!{entity}, $!{entity}VO, $!{field.propertyType}> {
    @Autowired
	private $!{table.serviceName} $!{table.entityPath}Service;

    @Override
    protected IBaseService<$!{entity}, $!{field.propertyType}> service() {
        return $!{table.entityPath}Service;
    }

    /**
     * 新增数据。
     *
     * @param $!{table.entityPath}DTO 新增对象。
     * @return 应答结果对象，包含新增对象主键Id。
     */
    @ApiOperationSupport(ignoreParameters = {"$!{table.entityPath}DTO.$!{field.propertyName}"})
    @PostMapping("/add")
    public Result<$!{field.propertyType}> add(@MyRequestBody $!{entity}DTO $!{table.entityPath}DTO) {
        String errorMessage = ValidateUtil.getModelValidationError($!{table.entityPath}DTO, false);
        if (errorMessage != null) {
            return Result.failed(ResultCode.DATA_VALIDATED_FAILED, errorMessage);
        }
        //$!{entity} $!{table.entityPath} = MyModelUtil.copyTo($!{table.entityPath}DTO, $!{entity}.class);
        $!{entity} $!{table.entityPath} = $!{entity}.INSTANCE.toModel($!{table.entityPath}DTO);

        $!{table.entityPath} = $!{table.entityPath}Service.saveNew($!{table.entityPath});
        return Result.succeed($!{table.entityPath}.get$!{field.capitalName}());
    }

    /**
     * 更新$!{entity}数据。
     *
     * @param $!{table.entityPath}DTO 更新对象。
     * @return 应答结果对象。
     */
    @PostMapping("/update")
    //标记每次都删除缓存
    @CacheEvict(value = "$!{table.entityPath}", key = "#$!{table.entityPath}DTO.$!{field.propertyName}")
    public Result<Void> update(@MyRequestBody $!{entity}DTO $!{table.entityPath}DTO) {
        String errorMessage = ValidateUtil.getModelValidationError($!{table.entityPath}DTO, true);
        if (errorMessage != null) {
            return Result.failed(ResultCode.DATA_VALIDATED_FAILED, errorMessage);
        }
        $!{entity} original$!{entity} = $!{table.entityPath}Service.getById($!{table.entityPath}.get$!{field.capitalName}());
        if (original$!{entity} == null) {
            // NOTE: 修改下面方括号中的话述
            errorMessage = "数据验证失败，当前 [数据] 并不存在，请刷新后重试！";
            return Result.failed(ResultCode.DATA_NOT_EXIST, errorMessage);
        }
        //$!{entity} $!{table.entityPath} = MyModelUtil.copyTo($!{table.entityPath}DTO, $!{entity}.class);
        $!{entity} $!{table.entityPath} = $!{entity}.INSTANCE.toModel($!{table.entityPath}DTO);

        if (!$!{table.entityPath}Service.update($!{table.entityPath})) {
            return Result.failed(ResultCode.DATA_NOT_EXIST);
        }
        return Result.succeed();
    }

    /**
     * 列出符合过滤条件的$!{entity}列表。
     *
     * @param $!{table.entityPath}DTOFilter 过滤对象。
     * @param orderParam 排序参数。
     * @param pageParam 分页参数。
     * @return 应答结果对象，包含查询结果集。
     */
    @PostMapping("/list")
    public Result<Pagination<$!{entity}VO>> list(
            @MyRequestBody $!{entity}DTO $!{table.entityPath}DTOFilter,
            @MyRequestBody MyOrderParam orderParam,
            @MyRequestBody MyPageParam pageParam) {
        if (pageParam != null) {
            PageMethod.startPage(pageParam.getPageNum(), pageParam.getPageSize());
        }
        //$!{entity} $!{table.entityPath}Filter = MyModelUtil.copyTo($!{table.entityPath}DTOFilter, $!{entity}.class);
        $!{entity} $!{table.entityPath}Filter = $!{entity}.INSTANCE.toModel($!{table.entityPath}DTOFilter);
        String orderBy = MyOrderParam.buildOrderBy(orderParam, $!{entity}.class);
        List<$!{entity}> $!{table.entityPath}List = $!{table.entityPath}Service.get$!{entity}List($!{table.entityPath}Filter, orderBy);
        return Result.succeed(MyPageUtil.makeResponseData($!{table.entityPath}List, $!{entity}.INSTANCE));
    }

    /**
     * 查看指定$!{entity}详情。
     *
     * @param $!{field.propertyName} 指定对象主键Id。
     * @return 应答结果对象，包含对象详情。
     */
    @GetMapping("/view")
    //判断缓存没有就执行方法更新缓存，缓存有就直接返回缓存的值
    @Cacheable(value = "$!{table.entityPath}", key = "#$!{field.propertyName}")
    public Result<$!{entity}VO> view(@RequestParam $!{field.propertyType} $!{field.propertyName}) {
        if (ObjectUtil.isAnyBlankOrNull($!{field.propertyName})) {
            return Result.failed(ResultCode.PARAM_IS_BLANK);
        }
        $!{entity} $!{table.entityPath} = $!{table.entityPath}Service.getById($!{field.propertyName});
        if ($!{table.entityPath} == null) {
            return Result.failed(ResultCode.DATA_NOT_EXIST);
        }
        $!{entity}VO $!{table.entityPath}Vo = $!{entity}.INSTANCE.fromModel($!{table.entityPath});
        return Result.succeed($!{table.entityPath}Vo);
    }

    /**
     * 删除$!{entity}数据。
     *
     * @param $!{field.propertyName} 删除对象主键Id。
     * @return 应答结果对象。
     */
    @PostMapping("/delete")
    //标记删除缓存
    @CacheEvict(value = "$!{table.entityPath}", key = "#$!{field.propertyName}")
    public Result<Void> delete(@MyRequestBody $!{field.propertyType} $!{field.propertyName}) {
        String errorMessage;
        if (ObjectUtil.isBlankOrNull($!{field.propertyName})) {
            return Result.failed(ResultCode.PARAM_IS_BLANK);
        }
        // 验证关联Id的数据合法性
        $!{entity} original$!{entity} = $!{table.entityPath}Service.getById($!{field.propertyName});
        if (original$!{entity} == null) {
            // NOTE: 修改下面方括号中的话述
            errorMessage = "数据验证失败，当前 [对象] 并不存在，请刷新后重试！";
            return Result.failed(ResultCode.DATA_NOT_EXIST, errorMessage);
        }
        if (!$!{table.entityPath}Service.remove($!{field.propertyName})) {
            errorMessage = "数据操作失败，删除的对象不存在，请刷新后重试！";
            return Result.failed(ResultCode.DATA_NOT_EXIST, errorMessage);
        }
        return Result.succeed();
    }
    
#end
#end
#else
public class $!{table.controllerName} {
#end

}
