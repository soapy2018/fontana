/**
 * Copyright (c) 2020-2030 宁波巨灵科技有限公司
 */
package $!{package.ServiceImpl};

import $!{package.Entity}.$!{entity};
import $!{package.Mapper}.$!{table.mapperName};
import $!{package.Service}.$!{table.serviceName};
import $!{superMapperClassPackage};
import $!{superServiceImplClassPackage};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * $!{table.comment} 服务实现类
 *
 * @author $!{author}
 * @since $!{date}
 */
@Service("$!{table.entityPath}Service")
#if($!{kotlin})
open class $!{table.serviceImplName} : $!{superServiceImplClass}<$!{table.mapperName}, $!{entity}>(), $!{table.serviceName} {

}
#else
#foreach($field in $!{table.fields})
#if($!{field.keyFlag})##主键
public class $!{table.serviceImplName} extends $!{superServiceImplClass}<$!{entity}, $!{field.propertyType}> implements $!{table.serviceName} {

    @Autowired
    private $!{entity}Mapper $!{table.entityPath}Mapper;

    /**
     * 返回当前Service的主表Mapper对象。
     *
     * @return 主表Mapper对象。
     */
    @Override
    protected BaseDaoMapper<$!{entity}> mapper() {
        return $!{table.entityPath}Mapper;
    }

    /**
     * 保存新增的$!{entity}对象。
     *
     * @param $!{table.entityPath}  新增$!{entity}对象。
     * @return 新增后的$!{entity}对象。
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public $!{entity} saveNew($!{entity} $!{table.entityPath}){
        $!{table.entityPath}.set$!{field.capitalName}(IdUtil.nextLongId());
        $!{table.entityPath}Mapper.insert($!{table.entityPath});
        return $!{table.entityPath};
    }

    /**
     * 更新$!{entity}对象。
     *
     * @param $!{table.entityPath}  更新的$!{entity}对象。
     * @return 更新成功返回true，否则false。
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean update($!{entity} $!{table.entityPath}){
        if($!{table.entityPath}Mapper.updateById($!{table.entityPath}) == 0){
            return false;
        }
        return true;
    }

    /**
     * 删除指定数据。
     *
     * @param $!{field.propertyName} 主键Id。
     * @return 成功返回true，否则false。
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean remove($!{field.propertyType} $!{field.propertyName}){
        if ($!{table.entityPath}Mapper.deleteById($!{field.propertyName}) == 0) {
            return false;
        }
        return true;
    }

    /**
     * 获取单表查询结果
     *
     * @param filter  过滤对象。
     * @param orderBy 排序参数。
     * @return 查询结果集。
     */
    @Override
    public List<$!{entity}> get$!{entity}List($!{entity} filter, String orderBy){
        return $!{table.entityPath}Mapper.get$!{entity}List(null, null, filter, orderBy);
    }

}
#end
#end

#end
