<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="$!{package.Mapper}.$!{table.mapperName}">

#if($!{enableCache})
    <!-- 开启二级缓存 -->
    <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>

#end
#if($!{baseResultMap})
    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="$!{package.Entity}.$!{entity}">
#foreach($field in $!{table.fields})
#if($!{field.keyFlag})##生成主键排在第一位
        <id column="$!{field.name}" property="$!{field.propertyName}"/>
#else
        <result column="$!{field.name}" property="$!{field.propertyName}"/>
#end
#end
    </resultMap>
#end



    <!-- 如果有逻辑删除字段过滤，请写到这里 -->
    <sql id="filterRef">
        <!-- 这里必须加上全包名，否则当filterRef被其他Mapper.xml包含引用的时候，就会调用Mapper.xml中的该SQL片段 -->
        <include refid="$!{package.Mapper}.$!{table.mapperName}.inputFilterRef"/>
        AND $!{table.name}.deleted_flag = ${@com.fontana.db.constant.GlobalDeletedFlag@NORMAL}
    </sql>

    <!-- 这里仅包含调用接口输入的主表过滤条件 -->
    <sql id="inputFilterRef">
        <if test="$!{table.entityPath}Filter != null">
        </if>
    </sql>

    <!-- 循环插入集合接口 -->
    <insert id="insertList">
        INSERT INTO $!{table.name}
        (
#foreach($field in $!{table.fields})
        $!{field.name}#if($foreach.hasNext),
#end
#end

        )
        VALUES
        <foreach collection="list" index="index" item="item" separator=",">
            (
#foreach($field in $!{table.fields})
            #{item.$!{field.propertyName}}#if($foreach.hasNext),
#end
#end
            )
        </foreach>
    </insert>

    <select id="get$!{entity}List" resultMap="BaseResultMap"
            parameterType="$!{package.Entity}.$!{entity}">
        SELECT * FROM $!{table.name}
        <where>
            <if test="inFilterColumn != null and inFilterColumn != '' and inFilterValues != null and inFilterValues.size &gt; 0">
                AND ${inFilterColumn} IN
                <foreach collection="inFilterValues" item="item" open="(" separator="," close=")">
                    '${item}'
                </foreach>
            </if>
            <include refid="filterRef"/>
        </where>
        <if test="orderBy != null and orderBy != ''">
            ORDER BY ${orderBy}
        </if>
    </select>

</mapper>
